<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo環境建置、指令紀錄</title>
    <url>/2025/01/08/HexoDescription/</url>
    <content><![CDATA[<style>
    hr{ width: 100%;
        border-style: solid;
        border-color: gray;
        border-width: 2px;
        margin:15px 0px !important;}
    .ms-5{margin-left:30px !important; font-size:18px;}
    th,td{font-size:16px !important;}
       
</style>
<!-- ------------------------------------------------------------------------------------- -->
<hr>
<h3 id="install_hexo">1. 安裝Hexo</h3>
<ul class="mb-0">前置作業
    <li class="ms-5">先安裝Node.js</li>
    <li class="ms-5">先安裝Git</li>
</ul>
<p class="mt-0">下載完之後，可在cmd分別下node-v 、 git -v檢查</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/g9Ucf4d.png"
                      class="" alt="hexo.jpg"
                > 
<p>打開cmd，輸入下面指令</p>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></div>
<p class="">-g （Global Installation）全域安裝</p>
<p class="">下載完之後，可在cmd下hexo -v檢查</p>
<!-- ------------------------------------------------------------------------------------- -->
<hr>
<h3 id="initialize_hexo">2. 初始化Hexo</h3>
<ul>有兩個做法
    <li class="ms-5">直接輸入下面指令，會自動於所在目錄建立一個新資料夾以操作 Hexo。</li>
    <div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init &lt;資料夾名稱&gt;</span><br></pre></td></tr></table></figure></div>
    <li class="ms-5">也可以先建立好資料夾，再切換到該資料夾，同樣能進行初始化</li>

<pre><code><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd &lt;資料夾路徑&gt;</span><br></pre></td></tr></table></figure></div>
</code></pre>
</ul>
<!-- ------------------------------------------------------------------------------------- -->
<hr>
<h3 id="folder_install_files">3. Hexo檔案說明</h3>
<p>確認路徑在專案資料夾中</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></div>
<p>完成後可看到以下檔案</p>
<h4 id="_config.yml">_config.yml</h4>
<ul>
    <li class="ms-5">有關網站配置的檔案，可修改各種配置設定。例如：網站標題、網站的網址、使用主題名稱等</li>
</ul>
<h4 id="scaffolds">scaffolds</h4>
<ul>
    <li class="ms-5">當我們建立新文章時，Hexo 會根據 scaffolds 中的模板建立相對應的檔案</li>
    <li class="ms-5">post、page 和 draft，分別對應：要發布的文章、頁面、草稿</li>
</ul>
<p>post模板可修改為</p>
<p><strong>如果有使用format，須注意會影響到markdown語法</strong></p>
<p><strong class="text-danger">excerpt: 要有預設值，不能為空</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">excerpt: &#x27;&#x27;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></div>
<ul>
    <li>生成標籤和分類</li>
    <li>可自訂首頁摘要</li>
</ul>
<!-- ------------------------------------------------------------------------------------- -->
<h4 id="themes">themes</h4>
<ul>
    <li class="ms-5">用來存放主題的資料夾</li>
    <li class="ms-5">Hexo 會根據主題來解析 scouce 資料夾中的檔案並產生靜態頁面。預設主題為 landscape</li>
</ul>
<!-- ------------------------------------------------------------------------------------- -->
<h4 id="source">source</h4>
<ul>
    <li class="ms-5">通常資料夾命名開頭會加上底線 _，例如 _imgs</li>
    <li class="ms-5">以 _ 開頭的檔案、資料夾或隱藏檔案會被忽略，除了 _posts 資料夾以外</li>
    <li class="ms-5">Markdown 檔和 HTML 檔會被解析，並放到 public 資料夾，而其他檔案則會被拷貝過去</li>
</ul>
<!-- ------------------------------------------------------------------------------------- -->
<h4 id="source_public_deploy_git">source & public & .deploy_git</h4>
<ul>
    <li class="ms-5">執行 hexo generate 之後，會將 scorce 文件夾中的 Markdown 檔和 HTML 檔進行解析，再結合主題進行渲染，生成靜態網站</li>
    <li class="ms-5">執行 hexo deploy 之後，則會將 public 文件夾中的內容部署到 GitHub，並生成 .deploy_git 資料夾，因此內容與 public 幾乎相同</li>
    <li class="ms-5">關係箭頭圖: </li>

  <div class="note p-4 mb-4 rounded-small default">
    <p>source -&gt; public -&gt; .deploy_git</p>

  </div>
</ul>
<!-- ------------------------------------------------------------------------------------- -->
<hr>
<h3 id="common_command">4. 常用指令</h3>

<h4 id="new_post">post 新增文章</h4>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post &quot;我的第一篇文章&quot;</span><br></pre></td></tr></table></figure></div>
<ul>
    <li>用途：用於創建 文章（Post）。</li>
    <li>生成位置：文章會被存放在 /source/_posts/ 資料夾中。</li>
    <ul>特點:
        <li style="margin-left:40px;">支援分類（Categories）和標籤（Tags）。</li>
        <li style="margin-left:40px;">自動顯示在文章列表，並支持分頁和排序。</li>
    </ul>
    <ul>網址結構
        <li style="margin-left:40px;">默認網址會是 /YYYY/MM/DD/文章名稱/</li>
    </ul>
</ul>
<h4 id="new_page">page 新增頁面</h4>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure></div>
<ul>
    <li>用於創建 頁面（Page）。</li>
    <li>生成位置：頁面會被存放在 /source/ 資料夾的根目錄或自定義資料夾中。</li>
    <ul>特點:
        <li style="margin-left:40px;">不會出現在文章列表，通常用於靜態頁面（如關於頁、聯絡頁等）。</li>
        <li style="margin-left:40px;">頁面可以手動添加到導航欄，作為獨立的功能頁面。</li>
    </ul>
    <ul>網址結構
        <li style="margin-left:40px;">默認網址會是 /about/</li>
    </ul>
</ul>

<h5>差異對比</h5>
<table>
    <thead>
        <tr>
            <th>功能</th>
            <th>hexo new post</th>
            <th>hexo new page</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>用途</td>
            <td>創建博客文章，支持分頁顯示</td>
            <td>創建靜態頁面，如「關於我」</td>
        </tr>
        <tr>
            <td>存放位置</td>
            <td>/source/_posts/</td>
            <td>/source/{頁面名稱}/index.md</td>
        </tr>
        <tr>
            <td>出現在首頁</td>
            <td>會自動顯示在文章列表中</td>
            <td>不會顯示，需要手動添加到導航</td>
        </tr>
        <tr>
            <td>支持分類/標籤</td>
            <td>支持</td>
            <td>不支持</td>
        </tr>
        <tr>
            <td>網址格式</td>
            <td>/YYYY/MM/DD/文章名稱/</td>
            <td>/{頁面名稱}/</td>
        </tr>
    </tbody>
</table>
<!-- ------------------------------------------------------------------------------------- -->
<h4 id="clean_file_cache">clean 清除靜態檔案與快取</h4>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure></div>

<h4 id="generate_static_file">generate 產生靜態檔案</h4>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></div>

<h4 id="run_server">server 啟動伺服器</h4>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></div>

<!-- ------------------------------------------------------------------------------------- -->
<hr>
<h3 id="push_github">5. 部屬到GitHub</h3>
<p>將專案名稱命名為 username.github.io，username 記得改成自己的帳號名稱</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/githubRepoName.png"
                     
                >
<h4 id="install_git">1. 安裝 Git 相關套件</h4>
<p>回到 hexo 資料夾，在終端機輸入下列指令：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>

<h4 id="edit__config.yml">2. 修改 _config.yml 檔案的 Deployment 設定</h4>
<p>需注意這裡指的 _config.yml 檔案是根目錄的，而不是 themes 主題中的。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">  branch: </span><br></pre></td></tr></table></figure></div>
<ul>
    <li class="ms-5">type：選擇部屬模式，這裡填 git</li>
    <li class="ms-5">repo：GitHub repository 的連結，記得將 username 修改成自己的帳號名稱</li>
    <li class="ms-5">branch：選擇分支，預設為 master</li>
</ul>
<p>修改完成後，建議執行以下程式</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl    // 清除之前建立的靜態檔案</span><br><span class="line">hexo g     // 建立靜態頁面</span><br><span class="line">hexo d     // 部署至 GitHub</span><br></pre></td></tr></table></figure></div>
<p>可合併第二、三行指令：hexo g -d 即可在產生靜態頁面後立刻部署。</p>

<h4 id="no_refresh">3. 怎麼沒有刷新?</h4>
<strong>如果你之前有部屬過了，再次deploy到github打開網頁，發現還是舊的畫面</strong>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>請按下</p>

    </div>
    <div class="notel-content">
      <p>ctrl + shift + r</p>

    </div>
  </div>

<p>因為google為了加快網頁載入速度，會自動快取js、css，需要刷新快取</p>
<!-- ------------------------------------------------------------------------------------- -->
<hr>
<h3 id="description_notes">※ 使用外部套件注意事項</h3>
<p>如果跟我一樣想快速調整版面，引入BootStrap套件，需要注意會有跟主題衝突的風險，
因此建議只引入必要性的套件</p>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap-utilities.min.css&quot;</span><br></pre></td></tr></table></figure></div>

<h4 id="bootstrap">bootstrap-utilities.min.css 包含以下內容：</h4>
<ul><strong>1. 間距工具（Margin & Padding）</strong>
    <li class="ms-5">類似 m-0, p-2, mt-3, mx-1 等。</li>
    <li class="ms-5">支援方向（如 t, b, l, r, x, y）和數值（如 0, 1, 2, 等）。</li>
</ul>
<ul><strong>2. 顯示工具（Display Utilities）</strong>
    <li class="ms-5">如 d-none, d-flex, d-inline 等，控制元素顯示方式。</li>
</ul>
<ul><strong>3. 定位工具（Position Utilities）</strong>
    <li class="ms-5">如 position-relative, position-absolute 等。</li>
</ul>
<ul><strong>4. 其他小工具類</strong>
    <li class="ms-5">如 text-center, text-start。</li>
    <li class="ms-5">還有 overflow-auto, overflow-hidden。</li>
</ul>
p.s.
<p class="" style="">我自己就是遇到文章的(toc)目錄的滾動動畫有問題，才知道有這個問題，為此我還特別去找redefine全部有關
toc.js與scroll監聽事件都改了一遍，還是不起作用....，做到一半放棄了去吃飯，突然靈光一閃想到bootstrap，還真的被我找到問題了.....</p>
<p><strong>"當想不到辦法時，就站起來走走或是過幾天再回來解這邊，就突然解開了耶~"</strong> ，這句話真的有用!!</p>
]]></content>
      <categories>
        <category>教學</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>整理通用與redefine主題設定</title>
    <url>/2025/01/10/RedefineDescription/</url>
    <content><![CDATA[<style>
    .table_border{border-style: solid;
        border-color: black;
        border-width: 2px;}

    img{max-height:500px;}    
    a{color: blue;}
    
    /* 覆蓋設定navbar*/
    /* redefine_navbar_hover_color --primary-color: #a31f34; */
    .navbar-item a{color:black !important;}
    .navbar-item a:hover{color: #a31f34 !important;}
</style>
<!-- ------------------------------------------------------------------------------------- -->
<h2 id="getting-started">快速開始</h2>
<h3 id="basic_info">基本設定</h3>
<ul><a class="link"   href="https://redefine-docs.ohevan.com/zh/basic/info" >請點我<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
    <li>可變更網頁標題、副標題</li>
    <li>可變更網頁logo、avatar</li>
</ul>
<!-- ------------------------------------------------------------------------------------- -->
<h3 id="change_count">變更每頁顯示文章數量</h3>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">`# Pagination`</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br></pre></td></tr></table></figure></div>
<ul>在 Hexo 的根目錄 _config.yml 中
    <li>per_page: 每頁顯示的文章數量</li>
    <li>pagination_dir: 分頁的目錄名稱。例如，分頁網址會是 /page/2/</li>
</ul>
<hr>
<!-- ------------------------------------------------------------------------------------- -->
<h3 id="navbar">navbar設定</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/haA52LH.png"
                     
                >
<a class="link"   href="https://redefine-docs.ohevan.com/zh/home/navbar" >請點我<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>_config.redefine.yml</p>

    </div>
    <div class="notel-content">
      <p>navbar:<br>  links:<br>    Home: # 主選單(row)名稱<br>    path: &#x2F; # 網址，可以是相對路徑或絕對路徑<br>    icon: fa-regular fa-house # Fontawesome圖示名稱（可選）</p>

    </div>
  </div>
<hr>
<!-- ------------------------------------------------------------------------------------- -->
<h4>設定navbar語言</h4>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/dTZfQZu.png"
                     
                >
<strong>請到<span class="text-danger">根目錄 _config.yml </span>中的 language 項目</strong>
<a class="link"   href="https://redefine-docs.ohevan.com/zh/language" >請點我<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>_config.yml</p>

    </div>
    <div class="notel-content">
      <p><code># Site</code><br>title: Ting’s Blog<br>subtitle: 這是一個關於技術分享、記錄心情的個人blog。<br>description: ‘’<br>keywords:<br>author: Ting<br>language: en<br>timezone: Asia&#x2F;Taipei</p>

    </div>
  </div>
<hr>
<!-- ------------------------------------------------------------------------------------- -->
<h3 id="css_customize">自定義版面</h3>
<p><strong>/themes/redefine/layout/layout.ejs</strong></p>
<pre class="m-0 p-0"><span>全局文章的相關設定</span>
    /* 整個文章容器 */
    .article-content-container{padding:10px 20px !important;}
        ------------------------------------------------------
        p{font-size:18px;}
        strong{font-size:18px;}
        /* 設定文章側邊目錄(toc) */
        .nav-item{font-size: 15px !important;}
        .toc-content-container{margin: 0 !important; padding: 0 !important;}
         ------------------------------------------------------
        /* 首頁調整文章區塊版面 */
		.home-article-item{margin: 10px !important; padding: 0 !important;}
</pre>
<hr>
<p><strong>/source/_posts/RedefineDescription.md</strong></p>
<pre class="m-0 p-0"><span>此篇文章設定</span>
    /* 覆蓋設定navbar*/
    /* redefine_navbar_hover_color --primary-color: #a31f34; */
    .navbar-item a{color:black !important;}
    .navbar-item a:hover{color: #a31f34 !important;}
</pre>
<hr>
<h4 style="color:red;">設定首頁文章排列區塊版面</h4>
<p><strong>/themes/redefine/layout/pages/home/home-content.ejs</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">div class=&quot;flex flex-col gap-3 px-3 pb-3 &lt;%= post.thumbnail !== false &amp;&amp; (post.thumbnail || post.cover || post.banner) ? &quot;pt-5&quot; : &quot;pt-7&quot; %&gt;&quot;&gt;&gt;</span><br></pre></td></tr></table></figure></div>
<hr>
<!-- ------------------------------------------------------------------------------------- -->
<h2 id="article_customize">自訂文章</h2>
<h3 id="edit_excerpt">編輯摘要</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/HjpTWeM.png"
                     
                >
<a class="link"  class="a_href"  href="https://redefine-docs.ohevan.com/zh/article_customize/excerpt" >請點我<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
<hr>
<!-- ------------------------------------------------------------------------------------- -->
<h3 id="set_max_width">調整最大寬度</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/LpbDh3j.png"
                     
                >
<a class="link"  class="a_href"  href="https://redefine-docs.ohevan.com/zh/basic/global" >請點我<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>content</p>

    </div>
    <div class="notel-content">
      <p>global.content_max_width</p>

    </div>
  </div>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>sidebar</p>

    </div>
    <div class="notel-content">
      <p>global.sidebar_width</p>

    </div>
  </div>
<hr>
<!-- ------------------------------------------------------------------------------------- -->
<h3 id="sidebar">首頁文章側邊欄</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/EOShqLn.png"
                     
                >
<a class="link"  class="a_href"  href="https://redefine-docs.ohevan.com/zh/home/home" >請點我<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>

<h2 id="article_toc">內容文章側邊目錄</h2>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/cpjXf6R.png"
                     
                >
<a class="link"  class="a_href"  href="https://redefine-docs.ohevan.com/zh/posts/articles" >請點我<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
<hr>
<!-- ------------------------------------------------------------------------------------- -->
<h2 id="page_templates">頁面相關設定</h2>
<strong style="color:red;">如要在導覽列使用tags、categories功能請先創建頁面</strong>
<h3 id="tag">標籤tags</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/TNCKtSB.png"
                     
                >
<a class="link"  class="a_href"  href="https://redefine-docs.ohevan.com/zh/page_templates/tags" >請點我<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
<hr>
<!-- ------------------------------------------------------------------------------------- -->
<h3 id="categories">分類categories</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/6OokAXo.png"
                     
                >
<a class="link"  class="a_href"  href="https://redefine-docs.ohevan.com/zh/page_templates/categories" >請點我<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
<hr>
<!-- ------------------------------------------------------------------------------------- -->
<h3 id="notes">筆記模塊</h3>
<h4 id="big_note">大提示塊</h4>
<p>格式：（notel 意思是 note large ，也可以寫成 note-large ）</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% notel [顏色] [可選: 自訂圖標] [標题] %&#125;</span><br><span class="line">内容</span><br><span class="line">支持换行</span><br><span class="line">&#123;% endnotel %&#125;</span><br></pre></td></tr></table></figure></div>
<a class="link"  class="a_href"  href="https://redefine-docs.ohevan.com/zh/modules/notes" >詳細說明<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
<table class="">
    <thead>
        <tr class="">
            <th>參數</th>
            <th>說明</th>
            <th>可選值</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>颜色</td>
            <td>提示區塊的樣式或顏色</td>
            <td>blue red cyan purple orange yellow green等颜色</td>
        </tr>
        <tr>
            <td>自訂圖標</td>
            <td>自訂圖標，選填</td>
            <td>Font Awesome  的圖示名稱後半部,例如 fa-image</td>
        </tr>
    </tbody>
</table>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% notel default fa-info 標題 %&#125;</span><br><span class="line">可換行</span><br><span class="line">可換行</span><br><span class="line">可換行</span><br><span class="line">&#123;% endnotel %&#125;</span><br><span class="line">---------------------------------</span><br><span class="line">&#123;% notel red 自定標題 %&#125;</span><br><span class="line">可換行</span><br><span class="line">可換行</span><br><span class="line">可換行</span><br><span class="line">&#123;% endnotel %&#125;</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/76mMbzK.png"
                     
                >
<hr>

<!-- ------------------------------------------------------------------------------------- -->
<h4 id="small_note">小提示塊</h4>
<p>格式：</p>
<table class="">
    <thead>
        <tr class="">
            <th>參數</th>
            <th>說明</th>
            <th>可選值</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>樣式/顏色</td>
            <td>提示區塊的樣式或顏色</td>
            <td>success default primary info warning danger tip question 以及 blue red cyan purple orange yellow green等颜色</td>
        </tr>
        <tr>
            <td>自訂圖標</td>
            <td>自訂圖標，選填</td>
            <td>Font Awesome  的圖示名稱後半部,例如 fa-image</td>
        </tr>
    </tbody>
</table>
<p>範例: </p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note %&#125; 預設 提示區塊標籤 &#123;% endnote %&#125;</span><br><span class="line">&#123;% note default %&#125; default 提示區塊標籤&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary %&#125; primary 提示區塊標籤 &#123;% endnote %&#125;</span><br><span class="line">&#123;% note success %&#125; success 提示區塊標籤 &#123;% endnote %&#125;</span><br><span class="line">&#123;% note info %&#125; info 提示區塊標籤 &#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning %&#125; warning 提示區塊標籤 &#123;% endnote %&#125;</span><br><span class="line">&#123;% 註 danger %&#125; danger 提示區塊標籤 &#123;% endnote %&#125;</span><br><span class="line">&#123;% note red fa-bolt%&#125; 自訂提示區塊標籤 &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/9l5LhKB.png"
                     
                >
<hr>
<!-- ------------------------------------------------------------------------------------- -->

<h3 id="close_count_word">關閉字數、閱讀時間</h3>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/d6xCCIl.png"
                     
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/23F898U.png"
                     
                >
<a class="link"  class="a_href"  href="https://redefine-docs.ohevan.com/zh/footer" >請點我<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
<hr>
<!-- ------------------------------------------------------------------------------------- -->
<h2 id="footer">頁腳設定</h2>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/wAT9iWO.png"
                     
                >
<a class="link"  class="a_href"  href="https://redefine-docs.ohevan.com/zh/posts/articles" >請點我<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>]]></content>
      <categories>
        <category>整理記錄</category>
      </categories>
      <tags>
        <tag>redefine</tag>
      </tags>
  </entry>
  <entry>
    <title>Ngrok說明</title>
    <url>/2025/01/14/Ngrok/</url>
    <content><![CDATA[<h2 id="ngrok">甚麼是Ngrok</h2>
<p>主要功能是作為一個<strong>本地代理伺服器</strong>，它能將你本地運行的應用或伺服器暴露到外部網路（如互聯網），即使你的本地設備處於防火牆或 NAT（網絡地址轉換）後面。</p>
<ul>
    具體來說，Ngrok 的功能包括：
    <li>1. 隧道服務（Tunneling Service）</li>
    <p style="margin-left:30px;">Ngrok 最核心的功能是提供隧道服務，它通過一個公開的 URL，將你本地運行的服務（如 Web 伺服器、API 等）暴露給外部網路。這意味著任何人只要擁有該 URL，就能訪問你本地的服務。</p>
    <!-- ------------------------------------------------------------------------------------- -->
    <li>2. HTTPS 支援</li>
    <p style="margin-left:30px;">Ngrok 自動生成帶有 HTTPS 的 URL，因此即使你的本地服務只支持 HTTP，Ngrok 也會提供一個安全加密的 HTTPS URL，確保數據在傳輸過程中得到保護。</p>
    <!-- ------------------------------------------------------------------------------------- -->
    <li>3. 處理 Webhook</li>
    <p style="margin-left:30px;">當使用第三方服務時，很多會要求你的應用能夠接收來自他們的 Webhook（如支付通知或 GitHub 的事件通知）。如果你的伺服器是本地的且無法直接對外公開，Ngrok 可以生成一個公開的 URL 來接收 Webhook 並將其轉發到你的本地伺服器，這在開發和測試階段非常有用。</p>
    <!-- ------------------------------------------------------------------------------------- -->
    <li>4. 本地開發與測試</li>
    <p style="margin-left:30px;">Ngrok 對於開發者來說是極其方便的工具，因為它可以模擬一個真實的互聯網環境，讓你本地運行的應用能夠接受來自外部的請求，而無需部署到外部伺服器上。</p>
    <!-- ------------------------------------------------------------------------------------- -->
    <li>5. 自訂子域名與自訂域名（付費功能）</li>
    <p style="margin-left:30px;">對於 Ngrok 的付費版本，你可以設定固定的子域名或自訂域名，使得每次啟動 Ngrok 時，URL 都不會變化。這對於長期需要測試或公開訪問的服務特別有用。</p>
</ul>

<h2 id="proxy">啟動本地伺服器代理</h2>
<p>使用 Ngrok 來暴露本地的 Flask 伺服器（通常 Flask 預設端口是 5000）：</p>
<p>執行ngrok.exe，輸入以下指令</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ngrok http 5000</span><br></pre></td></tr></table></figure></div>
<h3 id="much_proxy">代理多個Url</h3>
<p>正常來說，<strong>Ngrok一次只能配置一個url</strong>，但可以透過編輯yml檔來代理多個url</p>
<p>首先執行ngrok.exe，輸入以下指令，查看yml檔案路徑</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ngrok config check</span><br></pre></td></tr></table></figure></div>
<p>你應該會看到如下架構</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;2&quot;</span><br><span class="line">authtoken: 2mTPgdrUufU5dquLVU9X0Dk3ESq_3wNL57wshBaYgTgooEqsg</span><br><span class="line">tunnels:</span><br></pre></td></tr></table></figure></div>
<p>把這邊修改成</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;2&quot;</span><br><span class="line">authtoken: 2mTPgdrUufU5dquLVU9X0Dk3ESq_3wNL57wshBaYgTgooEqsg</span><br><span class="line">tunnels:</span><br><span class="line">  flask_app:</span><br><span class="line">    proto: http</span><br><span class="line">    addr: 5100</span><br><span class="line">  second_app:</span><br><span class="line">    proto: http</span><br><span class="line">    addr: 5200</span><br></pre></td></tr></table></figure></div>
<p>就可以達到代理多個url了</p>
<ul>重點解釋
    <p class="mb-0 fw-bold">tunnels底下的結構</p>
    <li >每個 tunnel（如 flask_app、second_app 等）是一個獨立的服務代理。</li>
    <li>每個代理都需要指定 proto（協議）和 addr（本地的應用埠號）。</li>
    <p class="mt-3 mb-0 fw-bold">啟用特定的代理</p>
    <li>啟用指定的代理：</li>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ngrok start flask_app</span><br><span class="line">ngrok start second_app</span><br></pre></td></tr></table></figure></div>
    <li>一次啟動多個代理：</li>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ngrok start flask_app second_app</span><br><span class="line">ngrok start --all</span><br></pre></td></tr></table></figure></div>
</ul>
<p style="color:gray;">我要當個免費仔xd</p>]]></content>
      <categories>
        <category>整理記錄</category>
      </categories>
      <tags>
        <tag>Ngrok</tag>
      </tags>
  </entry>
  <entry>
    <title>心情日誌</title>
    <url>/2025/01/14/life-lessons/life-lessons/</url>
    <content><![CDATA[<p>自己平常有用todo-list，紀錄今天要完成哪些事項，也會順便填入明天的。</p>
<p>但有時就有其他事情比較優先，例如有面試邀約、朋友想邀出來見個面、處理家裡事情等等，就會延宕到明天。</p>
<p>面試的準備永遠準備不完，每家公司的要求不一樣，只能盡自己全力，失敗時就沒有藉口。</p>
<p>還有不要對自己有過高的期待，找工作有時靠「緣分」，不盡然是技術問題。</p>

<p>目前的面試經驗也不豐富，我準備一場面試都需要花費不短時間，不像某些人可以臨場反應侃侃而談，很佩服他們。</p>
<p>然後我自己的理念是「先獲得人生第一個快樂的工作經驗、美好的開始」，比較重要，不要起跑點就跌倒了。</p>

<p>「可以把最喜歡、最有把握的公司面試順序排後面一點。」</p>
<p>累積面試經驗，先去面試比較沒興趣的公司，面試被刷掉就沒什麼損失，反而可以利用這些面試經驗，去順利拿到真正有興趣的公司 Offer ！</p>]]></content>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>整理有關哈希密碼與ILogger相關程式</title>
    <url>/2025/01/10/net/HashPassword/</url>
    <content><![CDATA[<h2 id="create_obj">先建立PasswordHasher物件</h2>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">private readonly PasswordHasher&lt;memberTable&gt; _passwordHasher;</span><br><span class="line">private readonly ILogger&lt;RegisterAndLoginController&gt; _logger;</span><br><span class="line">//注入控制器</span><br><span class="line">public RegisterAndLoginController(CitybreakContext context, ILogger&lt;當前的Controller&gt; logger)</span><br><span class="line">&#123;</span><br><span class="line">	_context = context;</span><br><span class="line">	_passwordHasher = new PasswordHasher&lt;memberTable&gt;();</span><br><span class="line">	_logger = logger;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="register">註冊</h2>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">memberData.password = _passwordHasher.HashPassword(memberTable user, string password);</span><br></pre></td></tr></table></figure></div>
<ul>
    <li>memberData.password: 自訂資料表物件.欄位</li>
    <li>_passwordHasher: 物件</li>
    <li>.HashPassword: 方法名稱，負責加密</li>
    <li>第一個參數: 傳入資料表物件，比如根據用戶的某些屬性進一步自定義加密邏輯。在這邊可以使用null
    ，表示直接對傳入的密碼進行加密</li>
    <li>第二個參數: 需要加密的字串</li>
</ul>

<h2 id="login">登入</h2>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//比對密碼</span><br><span class="line">PasswordVerificationResult result = _passwordHasher.VerifyHashedPassword</span><br><span class="line">        (member, member.password, value.password);</span><br><span class="line">//接受三個參數：用戶實體、存儲的哈希密碼和用戶輸入的密碼</span><br><span class="line">if (result == PasswordVerificationResult.Success)</span><br></pre></td></tr></table></figure></div>
<h4>PasswordVerificationResult</h4>
<ul>這是 Microsoft.AspNetCore.Identity 提供的一個型別，表示密碼驗證的結果
    <li>Success：驗證成功，密碼正確。</li>
    <li>Failed：驗證失敗，密碼不正確。</li>
    <li>SuccessRehashNeeded：密碼驗證成功，但需要重新哈希密碼（例如，哈希算法升級或安全策略改變）。</li>
</ul>

<h4>VerifyHashedPassword</h4>
<ul>主要是比對已儲存的哈希密碼與用戶輸入的原始密碼。
    <li>memberTable user: 用戶物件</li>
    <li>hashedPassword: 資料庫中儲存的經過哈希的密碼。</li>
    <li>providedPassword: 用戶輸入的密碼</li>
</ul>

]]></content>
      <categories>
        <category>整理記錄</category>
      </categories>
      <tags>
        <tag>hash</tag>
        <tag>.Net</tag>
        <tag>ILogger</tag>
      </tags>
  </entry>
  <entry>
    <title>物件導向OOP</title>
    <url>/2025/01/11/OOP/oop/</url>
    <content><![CDATA[<style>
    a{color:blue;}
    /* 覆蓋設定navbar*/
    /* redefine_navbar_hover_color --primary-color: #a31f34; */
    .navbar-item a{color:black !important;}
    .navbar-item a:hover{color: #a31f34 !important;}
    p{letter-spacing:2px;}
</style>
<p>把真實世界的事物抽象化為物件。以物件為主體，透過物件方法與其他物件進行互動</p>
<p>物件導向只是一種『設計概念 (design concept)』，而不是一種程式語法</p>
<h2 id="oop">三大特性</h2>
<ul>
    <li>封裝(Encapsulation)</li>
    <li>繼承(Inheritance)</li>
    <li>多型(Polymorphism)</li>
    <li style="margin-left:40px;">多載(Overload)</li>
    <li style="margin-left:40px;">覆寫(Override)</li>
</ul>
<h3 id="Encapsulation">封裝(Encapsulation)</h3>
<p><strong>把物件隱藏在類別裡，通過設定存取權限，只開放公開的方法讓別人可以使用，把內部實作細節隱藏，做到保護資料的目的
</strong></p>
<a class="link"   href="https://yubin551.gitbook.io/java-note/object_oriented_programming/encapsulation" >詳細資料<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>

<p>例如說"提款機"</p>
<p>你不需要知道內部還有多少錢，也不需要知道實際運作流程，你只要插入卡片，輸入密碼即可，接著就可以透過螢幕上按鈕互動</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ATM&#123;</span><br><span class="line">    private int 剩餘金額;</span><br><span class="line">    private boolean 身分確認(密碼)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br><span class="line">    public void 提款()&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    public void 查詢餘額(密碼)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="common">常見修飾子</h4>
<h5>private</h5>
<p>開放權限最低，只有同類別的成員可存取</p>

<h5>public</h5>
<p>可被所有類別存取</p>

<h5>protected</h5>
<p>可被不同package的子類別(繼承)存取</p>

<h5>default</h5>
<p>只能被同個package存取</p>

<!-- ------------------------------------------------------------------------------------- -->
<h3 id="Inheritance">繼承 (Inheritance)</h3>
<p><strong>子類別會擁有父類別全部的成員及方法，可以再透過覆寫(override)實作專屬自己的屬性
</strong></p>
<a class="link"   href="https://yubin551.gitbook.io/java-note/object_oriented_programming/inheritance" >詳細資料<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
<!-- ------------------------------------------------------------------------------------- -->
<h3 id="Polymorphism">多型(Polymorphism)</h3>
<a class="link"   href="https://yubin551.gitbook.io/java-note/object_oriented_programming/polymorphism" >Java備忘筆記<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
<a class="link"   href="https://matthung0807.blogspot.com/2018/02/java-overload.html" >肉豬工程師<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
<p><strong>指父類別為子類別的通用型態，再透過子類別可覆寫父類別的方法來達到多型的效果，
利用父類別提供的方法呼叫，執行子類別自己的行為。</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Animal &#123;</span><br><span class="line">    void move() &#123;</span><br><span class="line">        System.out.println(&quot;move...move...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    void move() &#123;</span><br><span class="line">        System.out.println(&quot;跑...跑...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Bird extends Animal &#123;</span><br><span class="line">    void move() &#123;</span><br><span class="line">        System.out.println(&quot;飛...飛...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Fish extends Animal &#123;</span><br><span class="line">    void move() &#123;</span><br><span class="line">        System.out.println(&quot;游...游...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="overload">多載(Overload)</h4>
<p><strong>指在一個類別(class)中，定義多個名稱相同，但參數(Parameter)不同的方法(Method)。</strong></p>
<p>例如Java String的indexOf(...)即為多載的例子。</p>
<p>以indexOf為名稱的方法分別為:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int indexOf(int ch)</span><br><span class="line">public int indexOf(int ch, int fromIndex)</span><br><span class="line">public int indexOf(String str)</span><br><span class="line">public int indexOf(String str, int fromIndex)</span><br></pre></td></tr></table></figure></div>
<p>所以只要方法的參數型態或數目不同，則允許多個相同名稱的方法存在。但要注意多載並不包含回傳型態不同，也就是如果方法的名稱相同，參數型態及數目相同，而只有回傳型態不同，仍有命名衝突的錯誤。例如下面範例的public String hello()即與public void hello()發生命名衝突。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface HelloWorld &#123;</span><br><span class="line">    void hello(); // 與最下面的 String hello() 衝突</span><br><span class="line">&lt;!-- ------------------------------------------------------------------------------------- --&gt;</span><br><span class="line">    void hello(int i);</span><br><span class="line">&lt;!-- ------------------------------------------------------------------------------------- --&gt;</span><br><span class="line">    void hello(int i, int j) ;</span><br><span class="line">&lt;!-- ------------------------------------------------------------------------------------- --&gt;</span><br><span class="line">    void hello(int i, String s);</span><br><span class="line">&lt;!-- ------------------------------------------------------------------------------------- --&gt;</span><br><span class="line">    void hello(String s) ;</span><br><span class="line">&lt;!-- ------------------------------------------------------------------------------------- --&gt;</span><br><span class="line">    String hello();  // 回傳型態不同並無多載，與最上面的 void hello() 衝突</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="override">覆寫(Override)</h4>
<p>通常用於繼承子類別，指子類別可以覆寫父類別的方法內容，使該方法擁有不同於父類別的行為。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // Animal為Dog及Bird的通用型態</span><br><span class="line">        Animal dog = new Dog();   // 子類別Dog物件分派至Animal型別變數dog</span><br><span class="line">        Animal bird = new Bird(); // 子類別Bird物件分派至Animal型別變數bird</span><br><span class="line">        act(dog);  // run</span><br><span class="line">        act(bird); // fly</span><br><span class="line">    &#125;</span><br><span class="line">&lt;!-- ------------------------------------------------------------------------------------- --&gt;</span><br><span class="line">    private static void act(Animal animal) &#123; // 因為多型，所以參數以通用的父類別傳入</span><br><span class="line">        animal.move(); // 因為多型及覆寫，所以實際執行的方法為子類別的方法內容</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- ------------------------------------------------------------------------------------- --&gt;</span><br><span class="line">class Animal &#123;</span><br><span class="line">    public void move() &#123;</span><br><span class="line">        System.out.println(&quot;move&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- ------------------------------------------------------------------------------------- --&gt;</span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void move() &#123;</span><br><span class="line">        System.out.println(&quot;run&quot;); // 覆寫父類別Animal.move()的內容</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- ------------------------------------------------------------------------------------- --&gt;</span><br><span class="line">class Bird extends Animal &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void move() &#123;</span><br><span class="line">        System.out.println(&quot;fly&quot;); // 覆寫父類別Animal.move()的內容</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<!-- ------------------------------------------------------------------------------------- -->
<h3 id="Abstract">抽象(Abstract)</h3>
<a class="link"   href="https://yubin551.gitbook.io/java-note/object_oriented_programming/abstract" >詳細資料<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
<p>抽象可以想像成一種概念，並不存在於世界上。</p>
<p>在『多型』的章節中，我們有一個Animal的類別，但現實生活中有這個東西嗎？ 動物只是一個概念，並沒有一種生物叫作動物。 狗、鳥、魚都是實際存在於世界上的實體，他們都是動物，現實中卻沒有一個實體叫作動物。</p>
<p>如果聽起來卡卡的，再反覆讀幾次。 所以我們可以把動物視為一種『概念』，他是抽象的，不存在於世界上的。 而Dog、Bird、Fish都具備這個概念的特質，所以繼承Animal。</p>
<!-- ------------------------------------------------------------------------------------- -->
<h4 id="abstract_class">抽象類別 abstract class</h4>
<p>利用abstract來修飾類別，可以使類別變成抽象類別，使用方法：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">abstract class 類別名稱&#123;</span><br><span class="line">    // 成員定義...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>抽象是一個概念，而不是一個存在的實體。同樣的，抽象類別不能被實體化。</p>
<strong>可使用繼承去實作抽象類別</strong>
<!-- ------------------------------------------------------------------------------------- -->
<h4 id="abstract_method">抽象方法 abstract method</h4>
<p>利用abstract，可以使方法變成抽象方法，抽象方法只能寫方法的原型，無法定義方法的本體(不能有{})。</p>

<p>使用格式：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">abstract &lt;修飾子&gt; 回傳型態 方法名稱(&lt;參數...&gt;);</span><br></pre></td></tr></table></figure></div>
<p>範例：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">abstract void eat();</span><br></pre></td></tr></table></figure></div>
<p>錯誤範例：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">abstract void eat()&#123;    // 編譯錯誤：Abstract methods do not specify a body</span><br><span class="line">    // 不管有沒有寫東西，都編譯錯誤，抽象方法不能定義方法本體</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>注意事項
    <li>抽象方法只能定義在抽象類別中。 (否則會編譯錯誤)</li>
    <li>繼承抽象類別的類別必須實作(override)全部抽象方法。 (否則會編譯錯誤)</li>
</ul>
<p>如果子類別沒有實作抽象方法，則子類別必須定義為抽象類別。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Cat extends Animal &#123;</span><br><span class="line">    // 沒有實作 eat() 方法，會導致編譯錯誤</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>將 Cat 定義為抽象類別，則不需要實作 eat()</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">abstract class Cat extends Animal &#123;</span><br><span class="line">    // 不需要實作 eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<!-- ------------------------------------------------------------------------------------- -->
<h3 id="Interface">介面(Interface)</h3>
<a class="link"   href="https://yubin551.gitbook.io/java-note/object_oriented_programming/interface" >詳細資料<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
<h5>介面，描述不同類別的共通行為。</h5> 
<p>假設電器設備指的是可以從台灣電力公司取得需要的電源。</p>
<p>冰箱跟烤箱都可以接受台灣電力公司的電源，這兩個東西都可以視為電器設備，但這兩個東西在繼承關係上可說是相差很遠的。</p>
<p>所以我們可以說，冰箱跟烤箱擁有相同的『 行為 』，在這裡指的就是接受並運用這個110/220伏特的交流電。</p>

<p>例如：</p>
<p>物件 -> 冷藏設備 -> 冰箱。</p>
<p>物件 -> 加熱設備 -> 烤箱。</p>
<p>由於<strong>Java不允許多重繼承</strong>(任何類別只能有一個父類別)，所以沒辦法讓冰箱既是冷藏設備又是電器設備。</p>
<!-- ------------------------------------------------------------------------------------- -->
<h5>無法多重繼承：</h5>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">class 冰箱 extends 冷藏設備,電器設備&#123;  // 編譯錯誤，不允許多重繼承</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>從現實中來看，冰箱跟烤箱只有 『 使用台電提供的電 』 這個共通的行為，因此我們把電器設備定義為介面，如此一來冰箱跟烤箱都可以『 實作 』這個介面，從而具有這個介面的特性，台電也很清楚的知道只要送出的電可以讓『 電器設備 』這個介面使用就好，任何需要電的設備只要符合這個介面制訂的規則，就可以獲得電力。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">class 冰箱 extends 冷藏設備 implements 電氣設備&#123; // 繼承冷藏設備，實作電器設備這個介面</span><br><span class="line">    // 成員宣告</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如此一來，冰箱就可以視為電器設備，當作電器設備來使用。</p>
<!-- ------------------------------------------------------------------------------------- -->
<h4 id="abstract_implements_interface">抽象類別實作介面的特性</h4>
<ul>1. 抽象類別可以選擇實作介面的方法：
    <li style="margin-left:40px;">抽象類別在實作介面時，可以選擇完全實作介面中的方法，也可以不實作，或者部分實作。</li>
    <li style="margin-left:40px;">如果抽象類別中沒有實作某些介面的方法，那麼子類別必須實作這些方法。</li>
</ul>
<p>下面有範例: </p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface A&#123;</span><br><span class="line">    void a();</span><br><span class="line">    void b();</span><br><span class="line">&#125;</span><br><span class="line">abstract class AbsClass implements A&#123;</span><br><span class="line">    public void b()&#123;</span><br><span class="line">        System.out.println(&quot;hello b~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    abstract void c();</span><br><span class="line">&#125;</span><br><span class="line">class MyClass extends AbsClass&#123;  </span><br><span class="line">    public void a() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    // 方法b()已經在AbsClass實作，MyClass不需要再實作，當然也可以再覆寫b()</span><br><span class="line">    public void c() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>2. 抽象類別的目的：
    <li style="margin-left:40px;">抽象類別通常用於定義共同的基底行為（部分實作）或邏輯，並讓子類別繼承和擴展。</li>
</ul>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Socket</span><br><span class="line">&#123;</span><br><span class="line">    void connect(string str);</span><br><span class="line">&#125;</span><br><span class="line">//抽象類別實作介面</span><br><span class="line">abstract class v110 : Socket</span><br><span class="line">&#123;</span><br><span class="line">    public void connect(string str)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(str + &quot;is 110v&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">abstract class v220 : Socket</span><br><span class="line">&#123;</span><br><span class="line">    public void connect(string str)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(str + &quot;is 220v&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Refrigerator : v110</span><br><span class="line">&#123;</span><br><span class="line">    private string str = &quot;&quot;;</span><br><span class="line">    public void refrigeration(string str)</span><br><span class="line">    &#123;</span><br><span class="line">        this.str = str;</span><br><span class="line">        connect(str);</span><br><span class="line">        System.Console.WriteLine(str + &quot;開始冷藏&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class AirConditioning : v220</span><br><span class="line">&#123;</span><br><span class="line">    private string str = &quot;&quot;;</span><br><span class="line">    public void Operation(string str)</span><br><span class="line">    &#123;</span><br><span class="line">        this.str = str;</span><br><span class="line">        connect(str);</span><br><span class="line">        System.Console.WriteLine(str + &quot;運作中...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>原則就是，非抽象類別要實作所有未定義的方法。</strong></p>
<!-- ------------------------------------------------------------------------------------- -->
<h4 id="interface_method">實作介面方法必須為公開(public)</h4>
<ul>介面的設計規則：
    <li style="margin-left:40px;">當一個類別或抽象類別實作介面時，這些方法的存取修飾符必須至少符合介面的可見性要求，也就是 public</li>
</ul>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">abstract class v110 : Socket</span><br><span class="line">&#123;</span><br><span class="line">    // 錯誤：介面成員必須是 public</span><br><span class="line">    protected void connect(string str)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(str + &quot; is 110v&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="Constructor">建構子</h3>
<a class="link"   href="https://yubin551.gitbook.io/java-note/object_oriented_programming" >詳細資料<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>
<p>在工程師使用 new 關鍵字來創造物件時被呼叫，用來初始化物件的資料欄位。</p>
<div class="mb-0">
    <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://i.imgur.com/SJIiKnx.png"
                     
                >
</div>
<h5>建構子有幾個特點：</h5>
<ol>
    <li>必須與類別名稱同名。</li>
    <li>不可以有回傳值。</li>
    <li>可以帶入引數(arguments)。</li>
    <li>主要功能為初始化物件，搭配new關鍵字被呼叫。</li>
    <li>可以有多個建構子，但引數型態及個數不可以相同。</li>
</ol>]]></content>
      <categories>
        <category>整理記錄</category>
      </categories>
      <tags>
        <tag>oop</tag>
      </tags>
  </entry>
  <entry>
    <title>.Net資料庫連接db</title>
    <url>/2025/01/10/net/NetConnectDB/</url>
    <content><![CDATA[<h2 id="install_package">1. 安裝套件</h2>
<strong>必要項</strong>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Microsoft.EntityFrameworkCore.SqlServer</span><br><span class="line">Microsoft.EntityFrameworkCore.Tools</span><br></pre></td></tr></table></figure></div>
<strong>非必要項</strong>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Microsoft.AspNetCore.Mvc.NewtonsoftJson (解析JSON)</span><br><span class="line">AutoMapper(自動映射DTO資料型態)</span><br><span class="line">Microsoft.AspNetCore.Authentication.Google </span><br><span class="line">SixLabors.ImageSharp(提取Images格式)</span><br></pre></td></tr></table></figure></div>
<!-- ------------------------------------------------------------------------------------- -->
<h2 id="connect_db">2. 連接資料庫字串</h2>
<p>到套件管理器主控台(檢視>其他視窗>套件管理器主控台)</p>

<h3 id="local_certification">本地認證</h3>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Scaffold-DbContext &quot;Server=.\SQLExpress; Database=TestProject; Integrated Security=True; TrustServerCertificate=true&quot; Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -NoOnConfiguring -UseDatabaseNames -NoPluralize -Force </span><br></pre></td></tr></table></figure></div>
<!-- ------------------------------------------------------------------------------------- -->
<h3 id="sql_certification">SQL認證</h3>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Scaffold-DbContext &quot;Server=34.81.75.116;Database=Zugether;User ID=sqlserver;Password=qwe321;TrustServerCertificate=true&quot; Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -NoOnConfiguring -UseDatabaseNames -NoPluralize -Force</span><br></pre></td></tr></table></figure></div>
<ul>說明參數
    <li>Integrated Security=True: 使用 Windows 認證來連接資料庫 。</li>
    <li>TrustServerCertificate=true: 表示允許接受未經驗證的 SSL 憑證。</li>
    <li>Microsoft.EntityFrameworkCore.SqlServer: 生成適用於 SQL Server 的代碼。 </li>
    <li>-OutputDir Models: 存放到名為 Models 的資料夾中。</li>
    <li>-NoOnConfiguring: 不要生成 OnConfiguring 代碼 。</li>
    <li>-UseDatabaseNames: 在生成類別和屬性名稱時，使用資料庫中的名稱 </li>
    <li>-NoPluralize: 不要對生成的類別名稱進行複數化處理 +s。</li>
    <li>-Force: 強制覆寫現有的模型。如果已經生成過模型類別，這個選項會強制覆蓋這些檔案。</li>
</ul>
<!-- ------------------------------------------------------------------------------------- -->
<h3 id="name">使用Name= 語法</h3>
<p>將連接字串存放於應用程式的設定檔（如 appsettings.json 或 app.config）中，並透過名稱參考來讀取它。</p>
<p><strong>在 appsettings.json 中定義連接字串：</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;ConnectionStrings&quot;: &#123;</span><br><span class="line">    &quot;ConnectionStrings&quot;: &quot;Server=.\\SQLExpress;Database=TestProject1;User ID=ting;Password=qwe321;TrustServerCertificate=true&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>在 Scaffold 命令中使用 Name=：</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Scaffold-DbContext &quot;Name=ConnectionStrings&quot; Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Force</span><br></pre></td></tr></table></figure></div>
<!-- ------------------------------------------------------------------------------------- -->
<h3 id="di">Program.cs中加入資料庫物件的注入。</h3>
<p>在var app = builder.Build(); 之前</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">builder.Services.AddDbContext&lt;WebContext&gt;(options =&gt; options.UseSqlServer(builder.Configuration.GetConnectionString(&quot;Database&quot;))); </span><br></pre></td></tr></table></figure></div>

<h3 id="appsettings">appsettings.json中加入連接字串</h3>
<p>本地</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;ConnectionStrings&quot;: &#123; &quot;Database&quot;: &quot;Server=.\\SQLExpress; Database=Zugether1;Integrated Security=True; TrustServerCertificate=true&quot; &#125;</span><br></pre></td></tr></table></figure></div>
<p>SQL</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;ConnectionStrings&quot;: &#123; &quot;Database&quot;: &quot;Server=.\\SQLExpress;Database=Web;User ID=sa1;Password=P@ssw@rd;TrustServerCertificate=true&quot; &#125; </span><br></pre></td></tr></table></figure></div>
<p><strong style="color:red;">"Database" : 可自訂名稱 </strong></p>
<!-- ------------------------------------------------------------------------------------- -->
<h2 id="controller">Controller.cs 加入以下代碼</h2>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class NorthwindController : ControllerBase</span><br><span class="line"> &#123;</span><br><span class="line">    //資料庫物件名稱的類別 宣告資料庫物件</span><br><span class="line">    private readonly NorthwindContext _context;</span><br><span class="line">    private readonly ILogger&lt;MemberController&gt; _logger;</span><br><span class="line">    private readonly PasswordHasher&lt;Member&gt; _passwordHasher;</span><br><span class="line">    //建構式(Constructor)</span><br><span class="line">    //取得依賴注入物件（Dependency Injection，DI）將NorthwindContext物件注入到控制器中</span><br><span class="line">    public NorthwindController(NorthwindContext context)</span><br><span class="line">    &#123;</span><br><span class="line">        _context = context;</span><br><span class="line">        _logger = logger;</span><br><span class="line">        _passwordHasher = new PasswordHasher&lt;Member&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>整理記錄</category>
      </categories>
      <tags>
        <tag>.Net</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL語法紀錄</title>
    <url>/2025/01/15/SQL/SQL/</url>
    <content><![CDATA[<p>Member</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE TestProject</span><br><span class="line">on primary </span><br><span class="line">(NAME=TestProject,FILENAME=&#x27;C:\SQLBackup\練習專案\TestProject.MDF&#x27;,</span><br><span class="line">SIZE=10MB,FILEGROWTH =10MB,MAXSIZE=100MB)</span><br><span class="line">LOG ON(NAME=TestProject_LOG,FILENAME=&#x27;C:\SQLBackup\練習專案\TestProject.LDF&#x27;,</span><br><span class="line">SIZE=10MB,FILEGROWTH =10MB,MAXSIZE=100MB)</span><br><span class="line">&lt;!-- ------------------------------------------------------------------------------------- --&gt;</span><br><span class="line">create table Member</span><br><span class="line">(member_id smallint identity(1,1) primary key,</span><br><span class="line">email varchar(50) not null constraint uq_email unique(email),</span><br><span class="line">[password] varchar(max) not null,</span><br><span class="line">name nvarchar(20) not null,</span><br><span class="line">phone nchar(10),</span><br><span class="line">created_time date default getDate()</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p>Message(trigger)</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE Message</span><br><span class="line">(message_id SMALLINT IDENTITY(1,1) PRIMARY KEY,</span><br><span class="line">message_board_id SMALLINT NOT NULL CONSTRAINT Message_FK_message_board_id</span><br><span class="line">FOREIGN KEY (message_board_id) REFERENCES Message_Board(message_board_id),</span><br><span class="line">reply_member_content NVARCHAR(50),</span><br><span class="line">message_content NVARCHAR(200) NOT NULL,</span><br><span class="line">member_id SMALLINT CONSTRAINT Message_FK_member_id</span><br><span class="line">FOREIGN KEY (member_id) REFERENCES Member(member_id),</span><br><span class="line">reply_member_id SMALLINT CONSTRAINT Message_FK_reply_member_id</span><br><span class="line">FOREIGN KEY (reply_member_id) REFERENCES Member(member_id),</span><br><span class="line">post_time VARCHAR(50) NOT null,</span><br><span class="line">message_basement TINYINT </span><br><span class="line">)</span><br><span class="line">GO</span><br><span class="line">--留言樓層trigger</span><br><span class="line">CREATE TRIGGER SetMessageBasement</span><br><span class="line">ON Message</span><br><span class="line">AFTER INSERT</span><br><span class="line">AS</span><br><span class="line">BEGIN</span><br><span class="line">    DECLARE @message_board_id smallint</span><br><span class="line">    DECLARE @new_basement tinyint</span><br><span class="line">&lt;!-- ------------------------------------------------------------------------------------- --&gt;</span><br><span class="line">    --  INSERTED存放剛插入的記錄=&gt;@message_board_id設置為新增的數字</span><br><span class="line">    SELECT @message_board_id = message_board_id FROM INSERTED</span><br><span class="line">&lt;!-- ------------------------------------------------------------------------------------- --&gt;</span><br><span class="line">    -- 找出個別message_board_id最大的message_basement</span><br><span class="line">    SELECT @new_basement = ISNULL(MAX(message_basement), 0) + 1</span><br><span class="line">    FROM Message</span><br><span class="line">    WHERE message_board_id = @message_board_id</span><br><span class="line">&lt;!-- ------------------------------------------------------------------------------------- --&gt;</span><br><span class="line">    -- 更新message_basement</span><br><span class="line">    UPDATE Message</span><br><span class="line">    SET message_basement = @new_basement</span><br><span class="line">    WHERE message_id IN (SELECT message_id FROM INSERTED)</span><br><span class="line">END	</span><br><span class="line">GO</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>整理記錄</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
</search>
